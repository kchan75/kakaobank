package com.kakaobank.out.controller;

import java.io.BufferedReader;

import javax.annotation.PostConstruct;

import org.json.simple.JSONObject;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

import com.kakaobank.out.outlog.OutLog;

@RestController
public class OutboundController {

	private static final org.slf4j.Logger log = org.slf4j.LoggerFactory.getLogger(OutboundController.class);

	@Value("${biz.url}")
	private String bizUrl;

	@Value("${app.biz}")
	private String biz;

	OutLog OL = new OutLog();
	private BufferedReader in = null;
	
	@PostConstruct
	private void init() {
		// TODO Auto-generated method stub
		System.out.println("START");
	}

	@RequestMapping(value = "/out", method = RequestMethod.POST)
//	public String start(@RequestBody Map<String, Object> params){
	public String start(@RequestBody JSONObject params) {

		/*
		 * 입력전문 로깅 1. File 방식 2. Logstash
		 */
		// 시스템 로그 로깅
		OL.outLog(params);

		/*
		 * Business Controller 호출 Biz에서는 하나이상의 RDB 호출(FW에서 DataSource 관리) 해당 FW는 조회용으로
		 * BIZ 레이어에서 데이터의 변경이 발생하지 않도록 트랜잭션 관리 필요
		 */

		if (isSucc)
			System.out.println("성공");
		else
			System.out.println("실패");

		/*
		 * Outbound Controller 호출
		 * 
		 * 
		 */

		return "SUCC";
	}
}
